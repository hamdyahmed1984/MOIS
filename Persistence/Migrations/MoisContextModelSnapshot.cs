// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.EntityFrameworkDataAccess;

namespace Persistence.Migrations
{
    [DbContext(typeof(MoisContext))]
    partial class MoisContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BuildingNumber")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("FlatNumber");

                    b.Property<int>("FloorNumber");

                    b.Property<int>("GovernorateId");

                    b.Property<int>("PoliceDepartmentId");

                    b.Property<int>("PostalCodeId");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("PoliceDepartmentId");

                    b.HasIndex("PostalCodeId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Domain.Entities.Documents.BirthDoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GenderId");

                    b.Property<string>("IPAddress");

                    b.Property<DateTime>("InsertedDate");

                    b.Property<bool>("IsFirstTime");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("MotherFullName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("NumberOfCopies")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int>("RelationId");

                    b.Property<int>("RequestId");

                    b.Property<int?>("StateId");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("RelationId");

                    b.HasIndex("RequestId");

                    b.HasIndex("StateId");

                    b.ToTable("BirthDocs");
                });

            modelBuilder.Entity("Domain.Entities.Documents.CriminalStateRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IPAddress");

                    b.Property<DateTime>("InsertedDate");

                    b.Property<string>("IssueDestination")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<int>("NumberOfCopies");

                    b.Property<int>("RequestId");

                    b.Property<int?>("StateId");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.HasIndex("StateId");

                    b.ToTable("CriminalStateRecords");
                });

            modelBuilder.Entity("Domain.Entities.Documents.DeathDoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GenderId");

                    b.Property<string>("IPAddress");

                    b.Property<DateTime>("InsertedDate");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("MotherFullName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("NumberOfCopies")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int>("RelationId");

                    b.Property<int>("RequestId");

                    b.Property<int?>("StateId");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("RelationId");

                    b.HasIndex("RequestId");

                    b.HasIndex("StateId");

                    b.ToTable("DeathDocs");
                });

            modelBuilder.Entity("Domain.Entities.Documents.DivorceDoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IPAddress");

                    b.Property<DateTime>("InsertedDate");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<int>("NumberOfCopies")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int>("RelationId");

                    b.Property<int>("RequestId");

                    b.Property<string>("SpouseFullName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("StateId");

                    b.HasKey("Id");

                    b.HasIndex("RelationId");

                    b.HasIndex("RequestId");

                    b.HasIndex("StateId");

                    b.ToTable("DivorceDocs");
                });

            modelBuilder.Entity("Domain.Entities.Documents.FamilyRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("GenderId");

                    b.Property<string>("GrandFatherName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("IPAddress");

                    b.Property<DateTime>("InsertedDate");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("MotherFullName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("NID")
                        .IsRequired()
                        .HasMaxLength(14);

                    b.Property<int>("NumberOfCopies");

                    b.Property<int>("RelationId");

                    b.Property<int>("RequestId");

                    b.Property<int?>("StateId");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("RelationId");

                    b.HasIndex("RequestId");

                    b.HasIndex("StateId");

                    b.ToTable("FamilyRecords");
                });

            modelBuilder.Entity("Domain.Entities.Documents.MarriageDoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IPAddress");

                    b.Property<DateTime>("InsertedDate");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<int>("NumberOfCopies")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int>("RelationId");

                    b.Property<int>("RequestId");

                    b.Property<string>("SpouseFullName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("StateId");

                    b.HasKey("Id");

                    b.HasIndex("RelationId");

                    b.HasIndex("RequestId");

                    b.HasIndex("StateId");

                    b.ToTable("MarriageDocs");
                });

            modelBuilder.Entity("Domain.Entities.Documents.NidDoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IPAddress");

                    b.Property<DateTime>("InsertedDate");

                    b.Property<bool>("IsFirstTime");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("JobTypeNIDId");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<int>("NidIssueReasonId");

                    b.Property<int>("NumberOfCopies")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int>("RequestId");

                    b.Property<int?>("StateId");

                    b.HasKey("Id");

                    b.HasIndex("JobTypeNIDId");

                    b.HasIndex("NidIssueReasonId");

                    b.HasIndex("RequestId");

                    b.HasIndex("StateId");

                    b.ToTable("NidDocs");
                });

            modelBuilder.Entity("Domain.Entities.Documents.PersonalRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IPAddress");

                    b.Property<DateTime>("InsertedDate");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<int>("NumberOfCopies");

                    b.Property<int>("RequestId");

                    b.Property<int?>("StateId");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.HasIndex("StateId");

                    b.ToTable("PersonalRecords");
                });

            modelBuilder.Entity("Domain.Entities.Documents.WorkPermitClearance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClearanceDestination")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("ClearanceReasonId");

                    b.Property<string>("IPAddress");

                    b.Property<DateTime>("InsertedDate");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<DateTime>("LastPermitFinishDate");

                    b.Property<string>("NavyAgentCertFileName")
                        .HasMaxLength(100);

                    b.Property<string>("NidFileName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("NumberOfCopies");

                    b.Property<string>("PassportFileName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("PassportId");

                    b.Property<string>("PreviousPermitFileName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("RenewDirectedLetterFileName")
                        .HasMaxLength(100);

                    b.Property<int>("RequestId");

                    b.Property<int?>("StateId");

                    b.Property<string>("VisaFileName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ClearanceReasonId");

                    b.HasIndex("PassportId");

                    b.HasIndex("RequestId");

                    b.HasIndex("StateId");

                    b.ToTable("WorkPermitClearanceaa");
                });

            modelBuilder.Entity("Domain.Entities.Documents.WorkPermitRenew", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BirthPlaceId");

                    b.Property<int?>("ForeignContractorId");

                    b.Property<string>("IPAddress");

                    b.Property<DateTime>("InsertedDate");

                    b.Property<string>("JobNameInEgypt")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("JobTypeWorkPermitId");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("NavyAgentCertFileName")
                        .HasMaxLength(100);

                    b.Property<string>("NavyPassportFileName")
                        .HasMaxLength(100);

                    b.Property<string>("NidFileName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("NumberOfCopies");

                    b.Property<string>("PassportFileName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("PassportId");

                    b.Property<string>("PreviousPermitFileName")
                        .HasMaxLength(100);

                    b.Property<int?>("PublicSectorId");

                    b.Property<DateTime>("QualificationDate");

                    b.Property<int>("QualificationId");

                    b.Property<int>("RequestId");

                    b.Property<int?>("StateId");

                    b.Property<string>("VacationPermitFileName")
                        .HasMaxLength(100);

                    b.Property<string>("VisaFileName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("WorkPermitIssueReasonId");

                    b.HasKey("Id");

                    b.HasIndex("BirthPlaceId");

                    b.HasIndex("ForeignContractorId");

                    b.HasIndex("JobTypeWorkPermitId");

                    b.HasIndex("PassportId");

                    b.HasIndex("PublicSectorId");

                    b.HasIndex("QualificationId");

                    b.HasIndex("RequestId");

                    b.HasIndex("StateId");

                    b.HasIndex("WorkPermitIssueReasonId");

                    b.ToTable("WorkPermitRenews");
                });

            modelBuilder.Entity("Domain.Entities.Documents.WorkPermitReplace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BirthPlaceId");

                    b.Property<int?>("ForeignContractorId");

                    b.Property<string>("IPAddress");

                    b.Property<DateTime>("InsertedDate");

                    b.Property<int?>("IssuingGovernorateId");

                    b.Property<int?>("IssuingUnitId");

                    b.Property<string>("JobNameInEgypt")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("JobTypeWorkPermitId");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("NavyAgentCertFileName")
                        .HasMaxLength(100);

                    b.Property<string>("NavyPassportFileName")
                        .HasMaxLength(100);

                    b.Property<string>("NidFileName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("NumberOfCopies");

                    b.Property<string>("PassportFileName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("PassportId");

                    b.Property<string>("PreviousPermitFileName")
                        .HasMaxLength(100);

                    b.Property<int?>("PublicSectorId");

                    b.Property<DateTime>("QualificationDate");

                    b.Property<int>("QualificationId");

                    b.Property<int>("RequestId");

                    b.Property<int?>("StateId");

                    b.Property<string>("VacationPermitFileName")
                        .HasMaxLength(100);

                    b.Property<string>("VisaFileName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("WorkPermitIssueReasonId");

                    b.HasKey("Id");

                    b.HasIndex("BirthPlaceId");

                    b.HasIndex("ForeignContractorId");

                    b.HasIndex("IssuingGovernorateId");

                    b.HasIndex("IssuingUnitId");

                    b.HasIndex("JobTypeWorkPermitId");

                    b.HasIndex("PassportId");

                    b.HasIndex("PublicSectorId");

                    b.HasIndex("QualificationId");

                    b.HasIndex("RequestId");

                    b.HasIndex("StateId");

                    b.HasIndex("WorkPermitIssueReasonId");

                    b.ToTable("WorkPermitReplaces");
                });

            modelBuilder.Entity("Domain.Entities.EligibleNID", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HashedNID")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(true);

                    b.Property<DateTime>("InsertedDate");

                    b.HasKey("Id");

                    b.ToTable("EligibleNID");
                });

            modelBuilder.Entity("Domain.Entities.ForeignContractor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressBuilding")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("AddressCity")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("AddressCountryId");

                    b.Property<string>("AddressDistrict")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("AddressStreet")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("ContractTypeId");

                    b.Property<string>("ContractorActivity")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("ContractorCountryId");

                    b.Property<string>("ContractorJobName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ContractorName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("ContractorTypeId");

                    b.Property<int>("CurrencyId");

                    b.Property<decimal>("Salary")
                        .HasColumnType("DECIMAL(15, 5)");

                    b.Property<string>("VisaNoOrAccomodationNo");

                    b.Property<bool>("WorkPlaceIsOnShips");

                    b.Property<int>("YearsToRenew");

                    b.HasKey("Id");

                    b.HasIndex("AddressCountryId");

                    b.HasIndex("ContractTypeId");

                    b.HasIndex("ContractorCountryId");

                    b.HasIndex("ContractorTypeId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("ForeignContractor");
                });

            modelBuilder.Entity("Domain.Entities.Lookups.ClearanceReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ClearanceReason");
                });

            modelBuilder.Entity("Domain.Entities.Lookups.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("RegionId");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Domain.Entities.Lookups.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Domain.Entities.Lookups.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Agreement")
                        .IsRequired();

                    b.Property<bool>("CanBeBundled");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<bool>("IsInstantApproval");

                    b.Property<int>("IssuerId");

                    b.Property<int>("MaxBeneficiaries");

                    b.Property<int>("MaxCopies");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL(15, 5)");

                    b.HasKey("Id");

                    b.HasIndex("IssuerId");

                    b.ToTable("DocumentType");
                });

            modelBuilder.Entity("Domain.Entities.Lookups.DocumentTypeRelation", b =>
                {
                    b.Property<int>("DocumentTypeId");

                    b.Property<int>("RelationId");

                    b.Property<int?>("GenderId");

                    b.HasKey("DocumentTypeId", "RelationId", "GenderId");

                    b.HasIndex("GenderId");

                    b.HasIndex("RelationId");

                    b.ToTable("DocumentTypeRelations");
                });

            modelBuilder.Entity("Domain.Entities.Lookups.ForeignContractType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ForeignContractType");
                });

            modelBuilder.Entity("Domain.Entities.Lookups.ForeignContractorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ForeignContractorType");
                });

            modelBuilder.Entity("Domain.Entities.Lookups.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("Domain.Entities.Lookups.GovernmentalEstablishment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int?>("GovernmentalEstablishmentTypeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("GovernmentalEstablishmentTypeId");

                    b.ToTable("GovernmentalEstablishment");
                });

            modelBuilder.Entity("Domain.Entities.Lookups.GovernmentalEstablishmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("GovernmentalEstablishmentType");
                });

            modelBuilder.Entity("Domain.Entities.Lookups.Governorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("PostDeliveryDays");

                    b.HasKey("Id");

                    b.ToTable("Governorate");
                });

            modelBuilder.Entity("Domain.Entities.Lookups.Issuer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("HomePageUrl")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("PackageDescription")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("PackageExpiryInHours");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("ReplyPeriod");

                    b.HasKey("Id");

                    b.ToTable("Issuer");
                });

            modelBuilder.Entity("Domain.Entities.Lookups.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("Domain.Entities.Lookups.JobTypeNID", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("JobTypeNID");
                });

            modelBuilder.Entity("Domain.Entities.Lookups.JobTypeWorkPermit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("JobTypeWorkPermit");
                });

            modelBuilder.Entity("Domain.Entities.Lookups.Ministry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Ministry");
                });

            modelBuilder.Entity("Domain.Entities.Lookups.NidIssueReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("NidIssueReason");
                });

            modelBuilder.Entity("Domain.Entities.Lookups.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("OrderStatus");
                });

            modelBuilder.Entity("Domain.Entities.Lookups.PassportIssuer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("PassportIssuer");
                });

            modelBuilder.Entity("Domain.Entities.Lookups.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("Domain.Entities.Lookups.PoliceDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("GovernorateId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.ToTable("PoliceDepartment");
                });

            modelBuilder.Entity("Domain.Entities.Lookups.PostalCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("GovernorateId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("PoliceDepartmentId");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("PoliceDepartmentId");

                    b.ToTable("PostalCode");
                });

            modelBuilder.Entity("Domain.Entities.Lookups.Qualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("QualificationTypeId");

                    b.HasKey("Id");

                    b.HasIndex("QualificationTypeId");

                    b.ToTable("Qualification");
                });

            modelBuilder.Entity("Domain.Entities.Lookups.QualificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("QualificationType");
                });

            modelBuilder.Entity("Domain.Entities.Lookups.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("Domain.Entities.Lookups.Regulation", b =>
                {
                    b.Property<int>("DocumentTypeId");

                    b.Property<int?>("JobTypeNIDId");

                    b.Property<string>("Regulations");

                    b.HasKey("DocumentTypeId", "JobTypeNIDId");

                    b.HasIndex("JobTypeNIDId");

                    b.ToTable("Regulations");
                });

            modelBuilder.Entity("Domain.Entities.Lookups.RejectionReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("RejectionReason");
                });

            modelBuilder.Entity("Domain.Entities.Lookups.Relation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Relation");
                });

            modelBuilder.Entity("Domain.Entities.Lookups.ReturnReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ReturnReason");
                });

            modelBuilder.Entity("Domain.Entities.Lookups.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2048);

                    b.HasKey("Id");

                    b.ToTable("State");
                });

            modelBuilder.Entity("Domain.Entities.Lookups.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("GovernorateId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.ToTable("Unit");
                });

            modelBuilder.Entity("Domain.Entities.Lookups.VacationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("VacationType");
                });

            modelBuilder.Entity("Domain.Entities.Lookups.WorkPermitIssueReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("WorkPermitIssueReason");
                });

            modelBuilder.Entity("Domain.Entities.Passport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("JobInPassportId");

                    b.Property<DateTime>("LastLeaveDate");

                    b.Property<DateTime>("LastReturnDate");

                    b.Property<int>("PassportIssueCountryId");

                    b.Property<DateTime>("PassportIssueDate");

                    b.Property<int?>("PassportIssuerId");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("JobInPassportId");

                    b.HasIndex("PassportIssueCountryId");

                    b.HasIndex("PassportIssuerId");

                    b.ToTable("Passport");
                });

            modelBuilder.Entity("Domain.Entities.PaymentDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("IPAddress");

                    b.Property<DateTime>("InsertedDate");

                    b.Property<string>("Name");

                    b.Property<string>("Notes")
                        .HasMaxLength(500);

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL(15, 5)");

                    b.Property<int>("Quantity");

                    b.Property<int>("RequestId");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("PaymentDetails");
                });

            modelBuilder.Entity("Domain.Entities.PublicSector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GovernmentalEstablishmentId");

                    b.Property<int>("VacationApprovedYears");

                    b.Property<DateTime>("VacationEnd");

                    b.Property<DateTime>("VacationStart");

                    b.Property<int>("VacationTypeId");

                    b.HasKey("Id");

                    b.HasIndex("GovernmentalEstablishmentId");

                    b.HasIndex("VacationTypeId");

                    b.ToTable("PublicSector");
                });

            modelBuilder.Entity("Domain.Entities.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<int>("DeliveryAddressId");

                    b.Property<int>("GenderId");

                    b.Property<int>("IssuerId");

                    b.Property<string>("MotherFullName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("PaymentMethodId");

                    b.Property<int>("ResidencyAddressId");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryAddressId");

                    b.HasIndex("GenderId");

                    b.HasIndex("IssuerId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("ResidencyAddressId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Domain.Entities.RequestEFinance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorizingMechanism")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("AuthoriztionDateTime");

                    b.Property<decimal?>("CollectionFeesAmount")
                        .HasColumnType("DECIMAL(15, 5)");

                    b.Property<decimal?>("CustomerAuthorizationAmount")
                        .HasColumnType("DECIMAL(15, 5)");

                    b.Property<bool?>("IsConfirmed");

                    b.Property<string>("PaymentRequestNumber")
                        .HasMaxLength(50);

                    b.Property<decimal?>("PaymentRequestTotalAmount")
                        .HasColumnType("DECIMAL(15, 5)");

                    b.Property<DateTime?>("ReconciliationDate");

                    b.Property<string>("SenderId")
                        .HasMaxLength(50);

                    b.Property<string>("SenderName")
                        .HasMaxLength(50);

                    b.Property<string>("SenderPassword")
                        .HasMaxLength(100);

                    b.Property<string>("SenderRandomValue")
                        .HasMaxLength(100);

                    b.Property<string>("SenderRequestNumber")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("RequestEFinance");
                });

            modelBuilder.Entity("Domain.Entities.RequestFawry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FawryPaymentMethod")
                        .HasMaxLength(20);

                    b.Property<string>("FawryRefNo")
                        .HasMaxLength(20);

                    b.Property<string>("MessageSignature")
                        .HasMaxLength(64);

                    b.Property<string>("Notes")
                        .HasMaxLength(500);

                    b.Property<decimal?>("OrderAmount")
                        .HasColumnType("DECIMAL(15, 5)");

                    b.Property<int?>("OrderStatusId");

                    b.HasKey("Id");

                    b.HasIndex("OrderStatusId");

                    b.ToTable("RequestFawry");
                });

            modelBuilder.Entity("Domain.Entities.RequestPostal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ErrorCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("RequestPostal");
                });

            modelBuilder.Entity("Domain.Entities.RequestState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IPAddress");

                    b.Property<DateTime>("InsertedDate");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<int?>("RejectionReasonId");

                    b.Property<int?>("RequestEFinanceId");

                    b.Property<int?>("RequestFawryId");

                    b.Property<int>("RequestId");

                    b.Property<int?>("RequestPostalId");

                    b.Property<int?>("ReturnReasonId");

                    b.Property<int>("StateId");

                    b.HasKey("Id");

                    b.HasIndex("RejectionReasonId");

                    b.HasIndex("RequestEFinanceId")
                        .IsUnique()
                        .HasFilter("[RequestEFinanceId] IS NOT NULL");

                    b.HasIndex("RequestFawryId")
                        .IsUnique()
                        .HasFilter("[RequestFawryId] IS NOT NULL");

                    b.HasIndex("RequestId");

                    b.HasIndex("RequestPostalId")
                        .IsUnique()
                        .HasFilter("[RequestPostalId] IS NOT NULL");

                    b.HasIndex("ReturnReasonId");

                    b.HasIndex("StateId");

                    b.ToTable("RequestState");
                });

            modelBuilder.Entity("Domain.Entities.Security.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Domain.Entities.Security.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Password")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.Security.UserRole", b =>
                {
                    b.Property<int>("RoleId");

                    b.Property<int>("UserId");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.HasOne("Domain.Entities.Lookups.Governorate", "Governorate")
                        .WithMany()
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Lookups.PoliceDepartment", "PoliceDepartment")
                        .WithMany()
                        .HasForeignKey("PoliceDepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Lookups.PostalCode", "PostalCode")
                        .WithMany()
                        .HasForeignKey("PostalCodeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entities.Documents.BirthDoc", b =>
                {
                    b.HasOne("Domain.Entities.Lookups.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Lookups.Relation", "Relation")
                        .WithMany()
                        .HasForeignKey("RelationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Request", "Request")
                        .WithMany("BirthDocs")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Lookups.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.OwnsOne("Domain.ValueObjects.NID", "NID", b1 =>
                        {
                            b1.Property<int>("BirthDocId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("NationalIdenNumber")
                                .IsRequired()
                                .HasColumnName("NID")
                                .IsFixedLength(true)
                                .HasMaxLength(14);

                            b1.HasKey("BirthDocId");

                            b1.ToTable("BirthDocs");

                            b1.HasOne("Domain.Entities.Documents.BirthDoc")
                                .WithOne("NID")
                                .HasForeignKey("Domain.ValueObjects.NID", "BirthDocId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Domain.ValueObjects.RequesterName", "Name", b1 =>
                        {
                            b1.Property<int>("BirthDocId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("FamilyName")
                                .IsRequired()
                                .HasColumnName("FamilyName")
                                .HasMaxLength(20);

                            b1.Property<string>("FatherName")
                                .IsRequired()
                                .HasColumnName("FatherName")
                                .HasMaxLength(20);

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnName("FirstName")
                                .HasMaxLength(20);

                            b1.Property<string>("GrandFatherName")
                                .IsRequired()
                                .HasColumnName("GrandFatherName")
                                .HasMaxLength(20);

                            b1.HasKey("BirthDocId");

                            b1.ToTable("BirthDocs");

                            b1.HasOne("Domain.Entities.Documents.BirthDoc")
                                .WithOne("Name")
                                .HasForeignKey("Domain.ValueObjects.RequesterName", "BirthDocId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Domain.Entities.Documents.CriminalStateRecord", b =>
                {
                    b.HasOne("Domain.Entities.Request", "Request")
                        .WithMany("CriminalStateRecords")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Lookups.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");
                });

            modelBuilder.Entity("Domain.Entities.Documents.DeathDoc", b =>
                {
                    b.HasOne("Domain.Entities.Lookups.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Lookups.Relation", "Relation")
                        .WithMany()
                        .HasForeignKey("RelationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Request", "Request")
                        .WithMany("DeathDocs")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Lookups.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.OwnsOne("Domain.ValueObjects.NID", "NID", b1 =>
                        {
                            b1.Property<int>("DeathDocId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("NationalIdenNumber")
                                .IsRequired()
                                .HasColumnName("NID")
                                .IsFixedLength(true)
                                .HasMaxLength(14);

                            b1.HasKey("DeathDocId");

                            b1.ToTable("DeathDocs");

                            b1.HasOne("Domain.Entities.Documents.DeathDoc")
                                .WithOne("NID")
                                .HasForeignKey("Domain.ValueObjects.NID", "DeathDocId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Domain.ValueObjects.RequesterName", "Name", b1 =>
                        {
                            b1.Property<int>("DeathDocId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("FamilyName")
                                .IsRequired()
                                .HasColumnName("FamilyName")
                                .HasMaxLength(20);

                            b1.Property<string>("FatherName")
                                .IsRequired()
                                .HasColumnName("FatherName")
                                .HasMaxLength(20);

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnName("FirstName")
                                .HasMaxLength(20);

                            b1.Property<string>("GrandFatherName")
                                .IsRequired()
                                .HasColumnName("GrandFatherName")
                                .HasMaxLength(20);

                            b1.HasKey("DeathDocId");

                            b1.ToTable("DeathDocs");

                            b1.HasOne("Domain.Entities.Documents.DeathDoc")
                                .WithOne("Name")
                                .HasForeignKey("Domain.ValueObjects.RequesterName", "DeathDocId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Domain.Entities.Documents.DivorceDoc", b =>
                {
                    b.HasOne("Domain.Entities.Lookups.Relation", "Relation")
                        .WithMany()
                        .HasForeignKey("RelationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Request", "Request")
                        .WithMany("DivorceDocs")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Lookups.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.OwnsOne("Domain.ValueObjects.NID", "NID", b1 =>
                        {
                            b1.Property<int>("DivorceDocId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("NationalIdenNumber")
                                .IsRequired()
                                .HasColumnName("NID")
                                .IsFixedLength(true)
                                .HasMaxLength(14);

                            b1.HasKey("DivorceDocId");

                            b1.ToTable("DivorceDocs");

                            b1.HasOne("Domain.Entities.Documents.DivorceDoc")
                                .WithOne("NID")
                                .HasForeignKey("Domain.ValueObjects.NID", "DivorceDocId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Domain.ValueObjects.RequesterName", "Name", b1 =>
                        {
                            b1.Property<int>("DivorceDocId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("FamilyName")
                                .IsRequired()
                                .HasColumnName("FamilyName")
                                .HasMaxLength(20);

                            b1.Property<string>("FatherName")
                                .IsRequired()
                                .HasColumnName("FatherName")
                                .HasMaxLength(20);

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnName("FirstName")
                                .HasMaxLength(20);

                            b1.Property<string>("GrandFatherName")
                                .IsRequired()
                                .HasColumnName("GrandFatherName")
                                .HasMaxLength(20);

                            b1.HasKey("DivorceDocId");

                            b1.ToTable("DivorceDocs");

                            b1.HasOne("Domain.Entities.Documents.DivorceDoc")
                                .WithOne("Name")
                                .HasForeignKey("Domain.ValueObjects.RequesterName", "DivorceDocId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Domain.Entities.Documents.FamilyRecord", b =>
                {
                    b.HasOne("Domain.Entities.Lookups.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Lookups.Relation", "Relation")
                        .WithMany()
                        .HasForeignKey("RelationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Request", "Request")
                        .WithMany("FamilyRecords")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Lookups.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");
                });

            modelBuilder.Entity("Domain.Entities.Documents.MarriageDoc", b =>
                {
                    b.HasOne("Domain.Entities.Lookups.Relation", "Relation")
                        .WithMany()
                        .HasForeignKey("RelationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Request", "Request")
                        .WithMany("MarriageDocs")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Lookups.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.OwnsOne("Domain.ValueObjects.NID", "NID", b1 =>
                        {
                            b1.Property<int>("MarriageDocId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("NationalIdenNumber")
                                .IsRequired()
                                .HasColumnName("NID")
                                .IsFixedLength(true)
                                .HasMaxLength(14);

                            b1.HasKey("MarriageDocId");

                            b1.ToTable("MarriageDocs");

                            b1.HasOne("Domain.Entities.Documents.MarriageDoc")
                                .WithOne("NID")
                                .HasForeignKey("Domain.ValueObjects.NID", "MarriageDocId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Domain.ValueObjects.RequesterName", "Name", b1 =>
                        {
                            b1.Property<int>("MarriageDocId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("FamilyName")
                                .IsRequired()
                                .HasColumnName("FamilyName")
                                .HasMaxLength(20);

                            b1.Property<string>("FatherName")
                                .IsRequired()
                                .HasColumnName("FatherName")
                                .HasMaxLength(20);

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnName("FirstName")
                                .HasMaxLength(20);

                            b1.Property<string>("GrandFatherName")
                                .IsRequired()
                                .HasColumnName("GrandFatherName")
                                .HasMaxLength(20);

                            b1.HasKey("MarriageDocId");

                            b1.ToTable("MarriageDocs");

                            b1.HasOne("Domain.Entities.Documents.MarriageDoc")
                                .WithOne("Name")
                                .HasForeignKey("Domain.ValueObjects.RequesterName", "MarriageDocId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Domain.Entities.Documents.NidDoc", b =>
                {
                    b.HasOne("Domain.Entities.Lookups.JobTypeNID", "JobTypeNID")
                        .WithMany()
                        .HasForeignKey("JobTypeNIDId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Lookups.NidIssueReason", "NidIssueReason")
                        .WithMany()
                        .HasForeignKey("NidIssueReasonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Request", "Request")
                        .WithMany("NidDoc")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Lookups.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.OwnsOne("Domain.ValueObjects.RequesterName", "Name", b1 =>
                        {
                            b1.Property<int>("NidDocId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("FamilyName")
                                .IsRequired()
                                .HasColumnName("FamilyName")
                                .HasMaxLength(20);

                            b1.Property<string>("FatherName")
                                .IsRequired()
                                .HasColumnName("FatherName")
                                .HasMaxLength(20);

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnName("FirstName")
                                .HasMaxLength(20);

                            b1.Property<string>("GrandFatherName")
                                .IsRequired()
                                .HasColumnName("GrandFatherName")
                                .HasMaxLength(20);

                            b1.HasKey("NidDocId");

                            b1.ToTable("NidDocs");

                            b1.HasOne("Domain.Entities.Documents.NidDoc")
                                .WithOne("Name")
                                .HasForeignKey("Domain.ValueObjects.RequesterName", "NidDocId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Domain.Entities.Documents.PersonalRecord", b =>
                {
                    b.HasOne("Domain.Entities.Request", "Request")
                        .WithMany("PersonalRecords")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Lookups.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");
                });

            modelBuilder.Entity("Domain.Entities.Documents.WorkPermitClearance", b =>
                {
                    b.HasOne("Domain.Entities.Lookups.ClearanceReason", "ClearanceReason")
                        .WithMany()
                        .HasForeignKey("ClearanceReasonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Passport", "Passport")
                        .WithMany()
                        .HasForeignKey("PassportId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Request", "Request")
                        .WithMany("WorkPermitClearances")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Lookups.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");
                });

            modelBuilder.Entity("Domain.Entities.Documents.WorkPermitRenew", b =>
                {
                    b.HasOne("Domain.Entities.Lookups.Country", "BirthPlace")
                        .WithMany()
                        .HasForeignKey("BirthPlaceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.ForeignContractor", "ForeignContractor")
                        .WithMany()
                        .HasForeignKey("ForeignContractorId");

                    b.HasOne("Domain.Entities.Lookups.JobTypeWorkPermit", "JobTypeWorkPermit")
                        .WithMany()
                        .HasForeignKey("JobTypeWorkPermitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Passport", "Passport")
                        .WithMany()
                        .HasForeignKey("PassportId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.PublicSector", "PublicSector")
                        .WithMany()
                        .HasForeignKey("PublicSectorId");

                    b.HasOne("Domain.Entities.Lookups.Qualification", "Qualification")
                        .WithMany()
                        .HasForeignKey("QualificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Request", "Request")
                        .WithMany("WorkPermitRenews")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Lookups.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("Domain.Entities.Lookups.WorkPermitIssueReason", "WorkPermitIssueReason")
                        .WithMany()
                        .HasForeignKey("WorkPermitIssueReasonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entities.Documents.WorkPermitReplace", b =>
                {
                    b.HasOne("Domain.Entities.Lookups.Country", "BirthPlace")
                        .WithMany()
                        .HasForeignKey("BirthPlaceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.ForeignContractor", "ForeignContractor")
                        .WithMany()
                        .HasForeignKey("ForeignContractorId");

                    b.HasOne("Domain.Entities.Lookups.Governorate", "IssuingGovernorate")
                        .WithMany()
                        .HasForeignKey("IssuingGovernorateId");

                    b.HasOne("Domain.Entities.Lookups.Unit", "IssuingUnit")
                        .WithMany()
                        .HasForeignKey("IssuingUnitId");

                    b.HasOne("Domain.Entities.Lookups.JobTypeWorkPermit", "JobTypeWorkPermit")
                        .WithMany()
                        .HasForeignKey("JobTypeWorkPermitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Passport", "Passport")
                        .WithMany()
                        .HasForeignKey("PassportId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.PublicSector", "PublicSector")
                        .WithMany()
                        .HasForeignKey("PublicSectorId");

                    b.HasOne("Domain.Entities.Lookups.Qualification", "Qualification")
                        .WithMany()
                        .HasForeignKey("QualificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Request", "Request")
                        .WithMany("WorkPermitReplaces")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Lookups.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("Domain.Entities.Lookups.WorkPermitIssueReason", "WorkPermitIssueReason")
                        .WithMany()
                        .HasForeignKey("WorkPermitIssueReasonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entities.ForeignContractor", b =>
                {
                    b.HasOne("Domain.Entities.Lookups.Country", "AddressCountry")
                        .WithMany()
                        .HasForeignKey("AddressCountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Lookups.ForeignContractType", "ContractType")
                        .WithMany()
                        .HasForeignKey("ContractTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Lookups.Country", "ContractorCountry")
                        .WithMany()
                        .HasForeignKey("ContractorCountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Lookups.ForeignContractorType", "ContractorType")
                        .WithMany()
                        .HasForeignKey("ContractorTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Lookups.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entities.Lookups.Country", b =>
                {
                    b.HasOne("Domain.Entities.Lookups.Region", "Region")
                        .WithMany("Countries")
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("Domain.Entities.Lookups.DocumentType", b =>
                {
                    b.HasOne("Domain.Entities.Lookups.Issuer", "Issuer")
                        .WithMany()
                        .HasForeignKey("IssuerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entities.Lookups.DocumentTypeRelation", b =>
                {
                    b.HasOne("Domain.Entities.Lookups.DocumentType", "DocumentType")
                        .WithMany("Relations")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Lookups.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Lookups.Relation", "Relation")
                        .WithMany("DocumentTypeRelations")
                        .HasForeignKey("RelationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entities.Lookups.GovernmentalEstablishment", b =>
                {
                    b.HasOne("Domain.Entities.Lookups.GovernmentalEstablishmentType", "GovernmentalEstablishmentType")
                        .WithMany("GovernmentalEstablishments")
                        .HasForeignKey("GovernmentalEstablishmentTypeId");
                });

            modelBuilder.Entity("Domain.Entities.Lookups.PoliceDepartment", b =>
                {
                    b.HasOne("Domain.Entities.Lookups.Governorate", "Governorate")
                        .WithMany("PoliceDepartments")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entities.Lookups.PostalCode", b =>
                {
                    b.HasOne("Domain.Entities.Lookups.Governorate", "Governorate")
                        .WithMany("PostalCodes")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Lookups.PoliceDepartment", "PoliceDepartment")
                        .WithMany()
                        .HasForeignKey("PoliceDepartmentId");
                });

            modelBuilder.Entity("Domain.Entities.Lookups.Qualification", b =>
                {
                    b.HasOne("Domain.Entities.Lookups.QualificationType", "QualificationType")
                        .WithMany("Qualifications")
                        .HasForeignKey("QualificationTypeId");
                });

            modelBuilder.Entity("Domain.Entities.Lookups.Regulation", b =>
                {
                    b.HasOne("Domain.Entities.Lookups.DocumentType", "DocumentType")
                        .WithMany("Regulations")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Lookups.JobTypeNID", "JobTypeNID")
                        .WithMany()
                        .HasForeignKey("JobTypeNIDId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.Lookups.Unit", b =>
                {
                    b.HasOne("Domain.Entities.Lookups.Governorate", "Governorate")
                        .WithMany("Units")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entities.Passport", b =>
                {
                    b.HasOne("Domain.Entities.Lookups.Job", "JobInPassport")
                        .WithMany()
                        .HasForeignKey("JobInPassportId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Lookups.Country", "PassportIssueCountry")
                        .WithMany()
                        .HasForeignKey("PassportIssueCountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Lookups.PassportIssuer", "PassportIssuer")
                        .WithMany()
                        .HasForeignKey("PassportIssuerId");
                });

            modelBuilder.Entity("Domain.Entities.PaymentDetails", b =>
                {
                    b.HasOne("Domain.Entities.Request", "Request")
                        .WithMany("PaymentDetails")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entities.PublicSector", b =>
                {
                    b.HasOne("Domain.Entities.Lookups.GovernmentalEstablishment", "GovernmentalEstablishment")
                        .WithMany()
                        .HasForeignKey("GovernmentalEstablishmentId");

                    b.HasOne("Domain.Entities.Lookups.VacationType", "VacationType")
                        .WithMany()
                        .HasForeignKey("VacationTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entities.Request", b =>
                {
                    b.HasOne("Domain.Entities.Address", "DeliveryAddress")
                        .WithMany()
                        .HasForeignKey("DeliveryAddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Lookups.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Lookups.Issuer", "Issuer")
                        .WithMany("Requests")
                        .HasForeignKey("IssuerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Lookups.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("Domain.Entities.Address", "ResidencyAddress")
                        .WithMany()
                        .HasForeignKey("ResidencyAddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("Domain.ValueObjects.ContactDetails", "ContactDetails", b1 =>
                        {
                            b1.Property<int>("RequestId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasMaxLength(50);

                            b1.Property<string>("Mobile1")
                                .IsRequired()
                                .HasMaxLength(20);

                            b1.Property<string>("Mobile2")
                                .HasMaxLength(20);

                            b1.Property<string>("PhoneHome")
                                .HasMaxLength(20);

                            b1.Property<string>("PhoneWork")
                                .HasMaxLength(20);

                            b1.HasKey("RequestId");

                            b1.ToTable("Requests");

                            b1.HasOne("Domain.Entities.Request")
                                .WithOne("ContactDetails")
                                .HasForeignKey("Domain.ValueObjects.ContactDetails", "RequestId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Domain.ValueObjects.NID", "NID", b1 =>
                        {
                            b1.Property<int>("RequestId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("NationalIdenNumber")
                                .IsRequired()
                                .HasColumnName("NID")
                                .HasMaxLength(14);

                            b1.HasKey("RequestId");

                            b1.ToTable("Requests");

                            b1.HasOne("Domain.Entities.Request")
                                .WithOne("NID")
                                .HasForeignKey("Domain.ValueObjects.NID", "RequestId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Domain.ValueObjects.RequesterName", "Name", b1 =>
                        {
                            b1.Property<int>("RequestId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("FamilyName")
                                .IsRequired()
                                .HasColumnName("FamilyName")
                                .HasMaxLength(20);

                            b1.Property<string>("FatherName")
                                .IsRequired()
                                .HasColumnName("FatherName")
                                .HasMaxLength(20);

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnName("FirstName")
                                .HasMaxLength(20);

                            b1.Property<string>("GrandFatherName")
                                .IsRequired()
                                .HasColumnName("GrandFatherName")
                                .HasMaxLength(20);

                            b1.HasKey("RequestId");

                            b1.ToTable("Requests");

                            b1.HasOne("Domain.Entities.Request")
                                .WithOne("Name")
                                .HasForeignKey("Domain.ValueObjects.RequesterName", "RequestId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Domain.Entities.RequestFawry", b =>
                {
                    b.HasOne("Domain.Entities.Lookups.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId");
                });

            modelBuilder.Entity("Domain.Entities.RequestState", b =>
                {
                    b.HasOne("Domain.Entities.Lookups.RejectionReason", "RejectionReason")
                        .WithMany()
                        .HasForeignKey("RejectionReasonId");

                    b.HasOne("Domain.Entities.RequestEFinance", "RequestEFinance")
                        .WithOne("RequestState")
                        .HasForeignKey("Domain.Entities.RequestState", "RequestEFinanceId");

                    b.HasOne("Domain.Entities.RequestFawry", "RequestFawry")
                        .WithOne("RequestState")
                        .HasForeignKey("Domain.Entities.RequestState", "RequestFawryId");

                    b.HasOne("Domain.Entities.Request", "Request")
                        .WithMany("RequestStates")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.RequestPostal", "RequestPostal")
                        .WithOne("RequestState")
                        .HasForeignKey("Domain.Entities.RequestState", "RequestPostalId");

                    b.HasOne("Domain.Entities.Lookups.ReturnReason", "ReturnReason")
                        .WithMany()
                        .HasForeignKey("ReturnReasonId");

                    b.HasOne("Domain.Entities.Lookups.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entities.Security.UserRole", b =>
                {
                    b.HasOne("Domain.Entities.Security.Role", "Role")
                        .WithMany("UsersRole")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Security.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
